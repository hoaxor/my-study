<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc 	http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--包扫描规则： use-default-filters="false" 不使用默认过滤器，默认过滤器会将标注了Component、Service等注解的类
加入容器
<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> 
 只处理Controller注解的类-->
    <context:component-scan base-package="com.hyh" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--通过配置conversion-service="conversionService" 使用自定义的conversionService-->
    <mvc:annotation-driven conversion-service="conversionService"/>

    <!--使用tomcat 默认的Servlet来响应静态文件, 需要搭配mvc:annotation-driven 使用，否则动态请求无法响应-->
    <mvc:default-servlet-handler/>


    <!--配置试图解析器，前端控制器会从容器中获取用来初始化viewResolver组件-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--        页面前缀-->
        <property name="prefix" value="/WEB-INF/page/"/>
        <!--        页面后缀-->
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--配置请求处理器适配，未配置时会使用默认配置-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
            </list>
        </property>
    </bean>

    <!--通过 ConversionServiceFactoryBean  获取 conversionService
    自定义 conversionService
        通过属性注入自定义的转换器
        自定义conversionService时，使用 FormattingConversionServiceFactoryBean 代替 ConversionServiceFactoryBean
        FormattingConversionServiceFactoryBean具有数据转换功能和格式化功能（日期格式化、数字格式化）
        ConversionServiceFactoryBean 只具有数据转换功能
        -->
    <!--    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
            <property name="converters">
                <set>
                    <bean class="com.hyh.springmvcdemo.converter.MyConverter"/>
                </set>
            </property>
        </bean>-->

    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="com.hyh.springmvcdemo.converter.MyConverter"/>
            </set>
        </property>
    </bean>

    <!--设置拦截器-->
    <mvc:interceptors>
        <!--配置单个拦截器， 拦截所有请求-->
        <!--        <bean id="interceptorTest" class="com.hyh.springmvcdemo.interceptor.InterceptorTest"/>-->
        <!-- 配置单个拦截器， 拦截指定路径请求 -->
        <mvc:interceptor>
            <mvc:mapping path="/interceptor1"/>
            <bean id="interceptorTest" class="com.hyh.springmvcdemo.interceptor.InterceptorTest"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--自定义异常处理器-->
    <bean id="simpleMappingExceptionResolver"
          class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 配置异常对应要去的页面-->
        <property name="exceptionMappings">
            <props>
                <!--key 全类名，value 视图名-->
                <prop key="java.lang.NullPointerException">error</prop>
            </props>
        </property>
    </bean>

    <import resource="classpath:spring-mybatis.xml"/>

</beans>